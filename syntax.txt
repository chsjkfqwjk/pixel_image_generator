像素图像生成器语法规范（AI参考文档）

本文档详细介绍像素图像生成器的语法规则，供AI生成图像描述文件时参考。

基本规则:
1. 每条指令独占一行
2. 指令格式为：命令:参数1\参数2\参数3...（使用冒号分隔命令和参数，使用反斜杠分隔多个参数）
3. 参数中的坐标点表示为：x|y（使用竖线分隔x和y坐标）
4. 可使用#添加注释，如：command:param # 这是注释
5. 空行和纯注释行会被忽略

命令详解:

1. config（图像配置）
语法: config:宽度\高度\背景红\背景绿\背景蓝
参数:
- 宽度: 图像宽度，整数，像素单位
- 高度: 图像高度，整数，像素单位
- 背景红/绿/蓝: RGB颜色值，范围0-255
说明: 必须是文件的第一条有效指令，定义图像尺寸和背景色
示例:
config:800\600\255\255\255  # 800x600白色背景
config:400\300\0\0\0        # 400x300黑色背景
config:1024\768\240\240\240 # 1024x768灰色背景

2. color（颜色定义）
语法: color:颜色ID\红\绿\蓝[\透明度]
参数:
- 颜色ID: 唯一标识符，用于后续引用此颜色
- 红/绿/蓝: RGB颜色值，范围0-255
- 透明度: 可选参数，范围0-255，0为完全透明，255为完全不透明，默认255
示例:
color:red\255\0\0           # 红色
color:blue\0\0\255          # 蓝色
color:green\0\255\0         # 绿色
color:yellow\255\255\0      # 黄色
color:purple\128\0\128      # 紫色
color:semi_red\255\0\0\128  # 半透明红色

3. region（区域定义）
语法: region:区域ID\x1|y1\x2|y2[\形状]
参数:
- 区域ID: 唯一标识符，用于后续引用此区域
- x1|y1: 左上角坐标
- x2|y2: 右下角坐标
- 形状: 可选参数，默认为rect（矩形），支持以下形状:
  rect: 矩形（默认）
  ellipse: 椭圆
  triangle: 三角形
  diamond: 菱形
  pentagon: 五边形
  hexagon: 六边形
  star: 五角星
  cross: 十字形
  arrow: 箭头
  自定义多边形: 格式为"x1|y1-x2|y2-x3|y3-..."
示例:
region:box1\50|50\150|150                # 矩形区域
region:circle1\200|50\300|150\ellipse    # 椭圆区域
region:tri1\50|170\150|270\triangle      # 三角形
region:star1\200|170\300|270\star        # 五角星
region:custom\50|50\150|150\0|0-100|0-50|100  # 自定义三角形

4. fill（区域填充）
语法: fill:区域ID\颜色ID
参数:
- 区域ID: 要填充的区域的标识符
- 颜色ID: 要使用的颜色的标识符
说明: 使用指定颜色填充指定区域，区域和颜色必须先定义
示例:
fill:box1\red      # 用红色填充box1区域
fill:circle1\blue  # 用蓝色填充circle1区域
fill:star1\yellow  # 用黄色填充star1区域

5. gradient（渐变填充）
语法: gradient:区域ID\类型\起点x|y\终点x|y\起始颜色ID\结束颜色ID
参数:
- 区域ID: 要应用渐变的区域标识符
- 类型: 渐变类型，可选值:
  linear: 线性渐变
  radial: 径向渐变
- 起点x|y: 渐变起点坐标
- 终点x|y: 渐变终点坐标
- 起始颜色ID: 渐变起点颜色标识符
- 结束颜色ID: 渐变终点颜色标识符
示例:
gradient:box1\linear\0|0\100|100\red\blue        # 从左上角(红)到右下角(蓝)的线性渐变
gradient:circle1\radial\250|250\300|300\yellow\green  # 从内(黄)到外(绿)的径向渐变

6. points（点阵填充）
语法: points:区域ID\颜色ID\模式\密度[\大小]
参数:
- 区域ID: 要填充点阵的区域标识符
- 颜色ID: 点的颜色标识符
- 模式: 点的分布模式，可选值:
  random: 随机分布
  grid: 均匀网格
  hex: 六边形网格
- 密度: 点的密度，0-1之间的小数，1为最大密度
- 大小: 可选参数，点的大小（像素），默认为1
示例:
points:box1\red\random\0.5\2    # 随机分布的红点，50%密度，2像素大小
points:circle1\blue\grid\0.3\1  # 网格分布的蓝点，30%密度，1像素大小
points:box2\green\hex\0.7\3     # 六边形网格分布的绿点，70%密度，3像素大小

7. path（路径绘制）
语法: path:点列表\颜色ID\线宽[\样式]
参数:
- 点列表: 路径点坐标，格式为x1|y1-x2|y2-...-xn|yn
- 颜色ID: 路径线条颜色的标识符
- 线宽: 路径线条宽度，像素单位
- 样式: 可选参数，路径线条样式，可选值:
  solid: 实线（默认）
  dashed: 虚线
  dotted: 点线
  wave: 波浪线
  closed: 闭合路径（自动连接首尾点）
示例:
path:10|10-100|10-100|100-10|100-10|10\blue\2            # 蓝色矩形轮廓，2像素宽
path:50|50-150|50-100|150\red\3\dashed                   # 红色虚线路径，3像素宽
path:200|50-300|150-400|50\green\2\wave\closed           # 绿色波浪闭合路径，2像素宽

8. transform（变换操作）
语法: transform:区域ID\操作类型\参数
参数:
- 区域ID: 要变换的区域标识符
- 操作类型: 变换类型，可选值:
  rotate: 旋转
  scale: 缩放
  translate: 平移
  flip: 翻转
- 参数: 根据操作类型不同:
  rotate: 旋转角度（度），如"45"
  scale: 缩放比例，格式为"x|y"，如"1.5|1.5"
  translate: 平移距离，格式为"x|y"，如"10|20"
  flip: 翻转方向，可为"horizontal"或"vertical"
示例:
transform:box1\rotate\45                # 将box1区域顺时针旋转45度
transform:circle1\scale\1.5|1.5         # 将circle1区域放大1.5倍
transform:tri1\translate\20|30          # 将tri1区域向右移动20像素，向下移动30像素
transform:star1\flip\horizontal         # 水平翻转star1区域

9. var（变量定义）
语法: var:变量名\值
参数:
- 变量名: 变量标识符，只能包含字母、数字和下划线
- 值: 变量值，可以是数字、文本或表达式
示例:
var:width\800                # 定义宽度变量
var:height\600               # 定义高度变量
var:centerX\{width/2}        # 定义中心X坐标变量（使用表达式）
var:centerY\{height/2}       # 定义中心Y坐标变量（使用表达式）
var:radius\100               # 定义半径变量
var:color_index\5            # 定义颜色索引变量

高级语法:

10. if（条件语句）
语法: if:条件表达式;指令1,指令2,...
参数:
- 条件表达式: 条件判断，支持比较运算符和逻辑运算符
- 指令1,指令2,...: 条件为真时执行的指令，多条指令用逗号分隔
说明:
- 条件和指令用分号分隔
- 多条指令用逗号分隔
- 支持的比较运算符: ==、!=、<、>、<=、>=
- 支持的逻辑运算符: and、or、not
示例:
if:width > 600;color:highlight\255\0\0,fill:box1\highlight  # 宽度大于600时定义高亮色并填充
if:x < 100 and y > 200;region:special\x|y\{x+50}|{y+50},fill:special\blue  # 条件组合
if:radius >= 50;transform:circle1\scale\1.5|1.5  # 半径大于等于50时放大circle1

11. loop（循环语句）
语法: loop:变量\起始值\结束值\步长;指令1,指令2,...
参数:
- 变量: 循环变量名
- 起始值: 循环起始值
- 结束值: 循环结束值（包含）
- 步长: 每次迭代的增量
- 指令1,指令2,...: 要循环执行的指令，多条指令用逗号分隔
说明:
- 循环头和循环体用分号分隔
- 多条指令用逗号分隔
- 循环变量可在循环体内的表达式中使用
- 循环次数上限为1000次
示例:
# 创建5个不同位置的方块
loop:i\0\4\1;region:box_{i}\{i*100}|50\{i*100+80}|130,fill:box_{i}\red

# 创建彩虹色渐变
loop:i\0\6\1;color:c_{i}\{i*40}\{255-i*40}\{(i*60)%255},region:r_{i}\{i*50}|100\{i*50+40}|140,fill:r_{i}\c_{i}

# 创建环形结构
loop:r\20\100\20;region:ring_{r}\{centerX-r}|{centerY-r}\{centerX+r}|{centerY+r}\ellipse,fill:ring_{r}\{r%40==0?red:blue}

12. 嵌套循环
语法: loop:外层变量\起始值\结束值\步长;loop:内层变量\起始值\结束值\步长;指令1,指令2,...
说明:
- 可以嵌套多层循环，每层循环格式相同
- 外层循环变量在内层循环中可用
- 内层循环完成后才会进入外层循环的下一次迭代
示例:
# 创建5x5网格
loop:x\0\4\1;loop:y\0\4\1;region:cell_{x}_{y}\{x*50}|{y*50}\{x*50+45}|{y*50+45},fill:cell_{x}_{y}\{(x+y)%2==0?red:blue}

# 创建径向渐变的同心圆
loop:r\20\100\20;loop:angle\0\330\30;color:c_{r}_{angle}\{127+r*cos(angle*3.14/180)}|{127+r*sin(angle*3.14/180)}|{r*2}

表达式:

花括号表达式
语法: {表达式}
说明:
- 花括号内的表达式会被动态计算
- 可用于任何参数位置
- 支持数学运算、逻辑运算和条件表达式
- 支持变量引用和函数调用
支持的运算符:
- 算术运算符: +、-、*、/（浮点除法）、//（整除）、%（取余）、**（幂）
- 比较运算符: ==、!=、<、>、<=、>=
- 逻辑运算符: and、or、not
支持的函数:
- 数学函数: sin、cos、tan、sqrt、pow、abs、min、max、round、floor、ceil
- 随机函数: rand（0-1随机数）、randint(min,max)（指定范围内的随机整数）
- 字符串函数: concat、format
内置变量:
- width: 图像宽度
- height: 图像高度
- center_x: 图像中心x坐标（等同于{width/2}）
- center_y: 图像中心y坐标（等同于{height/2}）
示例:
region:center\{width/2-50}|{height/2-50}\{width/2+50}|{height/2+50}  # 在图像中心创建区域
color:dynamic\{min(255,x*2)}\{max(0,y-50)}\{abs(x-y)}  # 使用数学函数
region:calc\{10+5*20}|{sqrt(100)}\{pow(2,8)}|{round(15.7)}  # 数学运算表达式

三元表达式
语法: {条件?真值:假值}
说明:
- 根据条件选择不同的值
- 可嵌套使用
- 条件为真时返回第一个值，条件为假时返回第二个值
示例:
fill:box1\{x>300?red:blue}  # 根据x值选择不同颜色
region:dynamic\{y<200?0:y-200}|0\{y<200?y:y+100}|height  # 根据y值确定区域位置
color:c1\{i%2==0?255:0}\{i%3==0?255:0}\{i%5==0?255:0}  # 根据i值计算RGB分量

性能优化注意事项:

1. 预定义资源: 在循环外预先定义颜色，避免在循环内重复创建
2. 使用合理步长: 选择适当的循环步长，避免不必要的细粒度迭代
3. 避免深度嵌套: 控制循环嵌套层数，通常不超过2-3层
4. 合并相似区域: 尽可能合并相似的区域，减少区域总数
5. 简化条件表达式: 使用简单条件代替复杂嵌套条件
6. 选择合适图像尺寸: 避免不必要的高分辨率

完整示例:

# 基础示例：创建一个包含多种形状的图像
config:800\600\240\240\240

# 定义颜色
color:blue\0\0\255
color:red\255\0\0
color:green\0\255\0
color:yellow\255\255\0
color:purple\128\0\128
color:cyan\0\255\255
color:orange\255\165\0
color:semi_blue\0\0\255\128

# 定义变量
var:centerX\{width/2}
var:centerY\{height/2}
var:radius\100

# 定义和填充矩形
region:box1\50|50\250|150
fill:box1\red

# 定义和填充椭圆
region:circle1\350|50\550|150\ellipse
fill:circle1\blue

# 定义和填充五角星
region:star1\50|200\250|300\star
fill:star1\yellow

# 创建渐变
region:gradient_box\350|200\550|300
gradient:gradient_box\linear\350|200\550|300\green\cyan

# 创建路径
path:50|350-250|350-250|450-50|450-50|350\purple\3

# 创建点阵
region:dots\350|350\550|450
points:dots\orange\random\0.5\2

# 使用条件语句
if:width > 700;region:wide\600|50\700|550,fill:wide\semi_blue

# 使用循环创建多个小方块
loop:i\0\9\1;region:small_{i}\{i*70+50}|500\{i*70+100}|550,fill:small_{i}\{i%2==0?red:blue}
